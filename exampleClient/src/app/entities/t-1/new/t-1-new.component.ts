import { Component, OnInit, Inject } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormBuilder, Validators } from '@angular/forms';
import { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from '@angular/material/dialog';

import { T1Service } from '../t-1.service';
import { IT1 } from '../it-1';
import { Globals, BaseNewComponent, PickerDialogService, ErrorService } from 'src/app/common/shared';

@Component({
  selector: 'app-t-1-new',
  templateUrl: './t-1-new.component.html',
  styleUrls: ['./t-1-new.component.scss'],
})
export class T1NewComponent extends BaseNewComponent<IT1> implements OnInit {
  title: string = 'New T1';
  constructor(
    public formBuilder: FormBuilder,
    public router: Router,
    public route: ActivatedRoute,
    public dialog: MatDialog,
    public dialogRef: MatDialogRef<T1NewComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any,
    public global: Globals,
    public pickerDialogService: PickerDialogService,
    public t1Service: T1Service,
    public errorService: ErrorService
  ) {
    super(formBuilder, router, route, dialog, dialogRef, data, global, pickerDialogService, t1Service, errorService);
  }

  ngOnInit() {
    this.entityName = 'T1';
    this.setAssociations();
    super.ngOnInit();
    this.setForm();
    this.checkPassedData();
  }

  setForm() {
    this.itemForm = this.formBuilder.group({
      str: [''],
    });

    this.fields = [
      {
        name: 'ca',
        label: 'ca',
        isRequired: false,
        isAutoGenerated: false,
      },
      {
        name: 'file',
        label: 'file',
        isRequired: false,
        isAutoGenerated: false,
      },
      {
        name: 'flpa',
        label: 'flpa',
        isRequired: false,
        isAutoGenerated: false,
      },
      {
        name: 'fpa',
        label: 'fpa',
        isRequired: false,
        isAutoGenerated: false,
      },
      {
        name: 'str',
        label: 'str',
        isRequired: false,
        isAutoGenerated: false,
        type: 'string',
      },
    ];
  }

  setAssociations() {
    this.associations = [];
    this.parentAssociations = this.associations.filter((association) => {
      return !association.isParent;
    });
  }

  onSubmit() {
    let t1 = this.itemForm.getRawValue();
    super.onSubmit(t1);
  }
}
